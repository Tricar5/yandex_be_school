# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2022-06-14T16:28:13+00:00


from datetime import datetime, date, timedelta
from time import time
from enum import Enum
from typing import Optional, List
from uuid import UUID

from pydantic import BaseModel, Field, validator, ValidationError


class ShopUnitType(Enum):
    OFFER = "OFFER"
    CATEGORY = "CATEGORY"


class ShopUnit(BaseModel):
    id: UUID = Field(
        ...,
        description="Уникальный идентификатор",
        example="3fa85f64-5717-4562-b3fc-2c963f66a333",
    )
    name: str = Field(..., description="Имя категории")
    date: datetime = Field(
        ...,
        description="Время последнего обновления элемента.",
        example="2022-05-28T21:12:01.000Z",
    )
    parentId: Optional[UUID] = Field(
        None,
        description="UUID родительской категории",
        example="3fa85f64-5717-4562-b3fc-2c963f66a333",
    )
    type: ShopUnitType
    price: Optional[int] = Field(
        None,
        description="Целое число, для категории - это средняя цена всех дочерних товаров(включая товары "
                    "подкатегорий). Если цена является не целым числом, округляется в меньшую сторону до целого "
                    "числа. Если категория не содержит товаров цена равна null.",
    )
    children: Optional[List["ShopUnit"]] = Field(
        None,
        description="Список всех дочерних товаров\\категорий. Для товаров поле равно null.",
    )


# Schemas for POST Method '/imports'


class ShopUnitImport(BaseModel):
    id: UUID = Field(
        ...,
        description="Уникальный идентификатор",
        example="3fa85f64-5717-4562-b3fc-2c963f66a333",
    )
    name: str = Field(..., description="Имя элемента.")
    parentId: Optional[UUID] = Field(
        default=None,
        description="UUID родительской категории",
        example="3fa85f64-5717-4562-b3fc-2c963f66a333",
    )
    type: ShopUnitType
    price: Optional[int] = Field(
        default=None,
        description="Целое число, для категорий поле должно содержать null.",
    )

    class Config:
        orm_mode = True
        use_enum_values = True


class ShopUnitImportRequest(BaseModel):
    items: Optional[List[ShopUnitImport]] = Field(
        None, description="Импортируемые элементы")

    updateDate: str = Field(
        None,
        description="Время обновления добавляемых товаров/категорий.",
        example="2022-05-28T21:12:01.000Z",
    )

    @validator('updateDate',)
    def validate_dt(cls, v):
        if not datetime.strptime(v, '%Y-%m-%dT%H:%M:%S.%f%z'):
            raise Error(code=400, message='Невалидная схема документа или входные данные не верны.')
        return datetime.strptime(v, '%Y-%m-%dT%H:%M:%S.%f%z')


# For import table
class ShopUnitCreate(BaseModel):
    import_id: int
    unit_id: UUID = Field(
        ...,
        description="Уникальный идентификатор",
        example="3fa85f64-5717-4562-b3fc-2c963f66a333",
    )
    name: str = Field(..., description="Имя элемента.")
    parent_id: Optional[UUID] = Field(
        default=None,
        description="UUID родительской категории",
        example="3fa85f64-5717-4562-b3fc-2c963f66a333",
    )
    type: ShopUnitType
    price: Optional[int] = Field(
        default=None,
        description="Целое число, для категорий поле должно содержать null.",
    )

    class Config:
        orm_mode = True
        use_enum_values = True


class ShopImport(BaseModel):
    id: int
    update_date: datetime

    class Config:
        orm_mode = True


class ShopImportCreate(BaseModel):
    id: Optional[int] = Field(
        default=None,
    )
    update_date: datetime = Field(..., description="Время выгрузки")

    class Config:
        orm_mode = True


class ShopUnitStatisticUnit(BaseModel):
    id: UUID = Field(
        ...,
        description="Уникальный идентификатор",
        example="3fa85f64-5717-4562-b3fc-2c963f66a333",
    )
    name: str = Field(..., description="Имя элемента")
    parentId: Optional[UUID] = Field(
        None,
        description="UUID родительской категории",
        example="3fa85f64-5717-4562-b3fc-2c963f66a333",
    )
    type: ShopUnitType
    price: Optional[int] = Field(
        None,
        description="Целое число, для категории - это средняя цена всех дочерних товаров(включая товары "
                    "подкатегорий). Если цена является не целым числом, округляется в меньшую сторону до целого "
                    "числа. Если категория не содержит товаров цена равна null.",
    )
    date: datetime = Field(..., description="Время последнего обновления элемента.")


class ShopUnitStatisticResponse(BaseModel):
    items: Optional[List[ShopUnitStatisticUnit]] = Field(
        None, description="История в произвольном порядке."
    )


class Error(BaseModel):
    code: int
    message: str
